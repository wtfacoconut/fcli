name: Build and release
on:
  workflow_dispatch:
  
  push:
    branches:
      - '**'
       
env:
  native_image_opts: --verbose -H:Log=registerResource:verbose -H:+PrintClassInitialization -H:+UnlockExperimentalVMOptions
  graal_distribution: graalvm-community
  graal_java_version: 23
          
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check-out source code
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: DEV - Define release info
        if: startsWith(github.ref, 'refs/heads/') && !env.DO_PROD_RELEASE
        run: |
          branch="${GITHUB_REF#refs/heads/}"
          tag="dev_${branch//[^a-zA-Z0-9_.-]/.}" # Replace all special characters by a dot
          major="0"
          minor="$(date +'%Y%m%d')"
          patch="$(date +'%H%M%S')-$tag"
          version="${major}.${minor}.${patch}"
          echo DO_BUILD=true >> $GITHUB_ENV # We always want to do a build if we're building a branch
          echo BRANCH=${branch} >> $GITHUB_ENV
          echo RELEASE_TAG=${tag} >> $GITHUB_ENV
          echo RELEASE_VERSION=${version} >> $GITHUB_ENV
          echo VERSION_MAJOR=${major} >> $GITHUB_ENV
          echo VERSION_MINOR=${minor} >> $GITHUB_ENV
          echo VERSION_PATCH=${patch} >> $GITHUB_ENV
          
          if git ls-remote --exit-code origin refs/tags/${tag} >/dev/null 2>&1; then
            echo "Found tag ${tag}, development release will be published"
            echo DO_RELEASE=true >> $GITHUB_ENV
            echo DO_DEV_RELEASE=true >> $GITHUB_ENV
          else 
            echo "Tag ${tag} does not exist, no development release will be published"
          fi 
      
      - name: Build release ${{env.RELEASE_VERSION}}
        if: env.DO_BUILD
        run: ./gradlew clean build dist distThirdPartyReleaseAsset distFtest -Pversion=${{env.RELEASE_VERSION}}
        
      - name: Check fcli version
        if: env.DO_BUILD
        run: java -jar build/libs/fcli.jar --version | tee /dev/stderr | grep -E '[0-9]+\.[0-9]+\.[0-9]+' >/dev/null || (echo "fcli --version doesn't output proper version number"; exit 1)
        
      - name: Publish build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/dist/**/*
          
    outputs:
      do_release: ${{ env.DO_RELEASE }}
      do_prod_release: ${{ env.DO_PROD_RELEASE }}
      do_dev_release: ${{ env.DO_DEV_RELEASE }}
      release_tag: ${{ env.RELEASE_TAG }}
      release_version: ${{ env.RELEASE_VERSION }}
      version_major: ${{ env.VERSION_MAJOR }}
      version_minor: ${{ env.VERSION_MINOR }}
      version_patch: ${{ env.VERSION_PATCH }}

  native_linux_aarch64:
    name: native-image-linux-aarch64
    runs-on: [self-hosted, ubuntu-20.04-aarch64]
    needs: build
    steps:
      - name: Check-out source code
        uses: actions/checkout@v4

      - uses: graalvm/setup-graalvm@v1
        with:
          distribution: ${{ env.graal_distribution }}
          java-version: ${{ env.graal_java_version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-musl: false # Because static images on aarch64/arm64 currently can't use musl

      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          name: build-output

      - name: Create native fcli
        run: native-image ${{ env.native_image_opts }} -Djansi.disable=true --initialize-at-build-time=com.fortify.cli.app.FortifyCLI --static --libc=musl -H:ExcludeResources="org/fusesource/jansi/internal/native/.*" -jar ./artifacts/release-assets/fcli.jar -o fcli

      - name: Basic test of native fcli
        run: ./fcli --help && ./fcli get --help

      - name: Check fcli version
        run: ./fcli --version | tee /dev/stderr | grep -E '[0-9]+\.[0-9]+\.[0-9]+' >/dev/null || (echo "fcli --version doesn't output proper version number"; exit 1)

      - name: Package native fcli
        run: tar -zcvf artifacts/release-assets/fcli-linux-aarch64.tgz fcli -C ./artifacts fcli_completion

      - uses: actions/upload-artifact@v4
        with:
          path: ./artifacts/**/fcli-linux-aarch64.tgz
          name: fcli-linux-aarch64

  docker-linux-aarch64:
    name: Build aarch64 linux containers
    needs: [build, native_linux_aarch64]
    runs-on: [self-hosted, ubuntu-20.04-aarch64]
    env:
      DOCKER_SRC: fcli-other/fcli-docker/linux
    steps:
        - name: Check-out source code
          uses: actions/checkout@v4

        - name: Download artifacts
          uses: actions/download-artifact@v4
          with:
            path: ./artifacts
            name: fcli-linux-aarch64

        - name: Build & test Linux images
          shell: bash
          run: |
            tar -zxvf ./artifacts/release-assets/fcli-linux-aarch64.tgz -C ${DOCKER_SRC}
            cd ${DOCKER_SRC}
            for i in scratch alpine ubi9
            do
              docker build . --target fcli-${i} -t fcli-${i}
              mkdir ${PWD}/${i}
              docker run --rm -u $(id -u):$(id -g) -v ${PWD}/${i}:/data fcli-${i} fcli tool sc-client ls
            done


        - name: DEV - Tag Linux images
          if: needs.build.outputs.do_dev_release
          shell: bash
          run: |
            docker tag fcli-scratch fortifydocker/fcli:${{needs.build.outputs.release_tag}}

        - name: PROD - Tag Linux images
          if: needs.build.outputs.do_prod_release
          shell: bash
          run: |
            docker tag fcli-scratch fortifydocker/fcli-scratch:latest
            docker tag fcli-ubi9 fortifydocker/fcli-ubi9:latest
            docker tag fcli-alpine fortifydocker/fcli-alpine:latest

        - name: Export the images as files
          run: |
            mkdir fcli-images
            docker save -o fcli-images/fcli-scratch.tar fcli-scratch
            docker save -o fcli-images/fcli-ubi.tar fcli-ubi9
            docker save -o fcli-images/fcli-alpine.tar fcli-alpine

        - name: Upload
          uses: actions/upload-artifact@v4
          with:
            path: ./fcli-images/*.tar
            name: fcli-linux-aarch64-images
